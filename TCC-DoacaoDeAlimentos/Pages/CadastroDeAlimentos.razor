@page "/CadastroDeAlimentos"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@using TCCDoacaoDeAlimentos.Shared.Models;

<div class="min-vh-100 py-5" style="background-color: #d4edda;">
    <div class="container text-center my-5">
        <h1>Cadastro de Alimentos</h1>
        <h5>Cadastre e gerencie os tipos de alimentos aceitos para doação</h5>
    </div>
    <div class="container">
        <div class="row g-4">
            <div class="col-md-5">
                <div class="card shadow-sm">
                    <div class="card-body">
                        <h5 class="card-title">Adicionar Novo Alimento</h5>

                        <EditForm Model="@NovoAlimento" OnValidSubmit="@CadastrarAlimento">
                            <DataAnnotationsValidator />
                            <div class="mb-3">
                                <label for="nome" class="form-label">Nome</label>
                                <InputText id="nome" @bind-Value="NovoAlimento.Nome" class="form-control" placeholder="Nome do Alimento" />
                                <ValidationMessage For="@(() => NovoAlimento.Nome)" class="text-danger" />
                            </div>
                            <div class="mb-3">
                                <label for="categoria" class="form-label">Categoria</label>
                                <InputSelect id="categoria" @bind-Value="NovoAlimento.Categoria" class="form-control">
                                    <option value="">Selecione...</option>
                                    <option value="Grãos e Cereais">Grãos e Cereais</option>
                                    <option value="Frutas">Frutas</option>
                                    <option value="Verduras e Legumes">Verduras e Legumes</option>
                                    <option value="Laticínios">Laticínios</option>
                                    <option value="Carnes">Carnes</option>
                                    <option value="Enlatados">Enlatados</option>
                                    <option value="Massas">Massas</option>
                                    <option value="Farináceos">Farináceos</option>
                                    <option value="Laticínios">Laticínios</option>
                                    <option value="Bebidas">Bebidas</option>
                                    <option value="Óleos e Gorduras">Óleos e Gorduras</option>
                                    <option value="Padaria">Padaria</option>
                                    <option value="Outros">Outros</option>
                                </InputSelect>
                                <ValidationMessage For="@(() => NovoAlimento.Categoria)" class="text-danger" />
                            </div>
                            @if (editando)
                            {
                                <button type="button" class="btn btn-success w-100" @onclick="AtualizarAlimento">Atualizar Alimento</button>
                                <button type="button" class="btn btn-danger w-100 mt-2" @onclick="@(() => { NovoAlimento = new Alimento(); editando = false; })">Cancelar</button>
                            }
                            else
                            {
                                <button type="submit" class="btn btn-success w-100">Cadastrar Alimento</button>
                            }
                        </EditForm>
                    </div>
                </div>
            </div>


            <div class="col-md-7">
                <div class="card shadow-sm">
                    <div class="card-body">
                        <h5 class="card-title">Alimentos Cadastrados</h5>

                        @if (alimentos == null)
                        {
                            <p>Carregando...</p>
                        }
                        else if (!alimentos.Any())
                        {
                            <p class="text-muted">Nenhum alimento cadastrado ainda. Adicione alimentos usando o formulário ao lado.</p>
                        }
                        else
                        {
                            <div class="table-responsive" style="max-height: 300px; overflow-y: auto;">
                                <table class="table">
                                    <thead>
                                        <tr class="table-success">
                                            <th>Nome</th>
                                            <th>Categoria</th>
                                            <th>Ações</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var alimento in alimentos)
                                        {
                                            <tr>
                                                <td>@alimento.Nome</td>
                                                <td>@alimento.Categoria</td>
                                                <td class="d-flex align-items-center gap-2">
                                                    <button @onclick="@(() => EditarAlimento(alimento))" class="btn btn-sm btn-outline-success">Editar</button>
                                                    <button @onclick="@(() => RemoverAlimento(alimento))"
                                                            class="p-0 m-0 bg-transparent border-0 text-danger"
                                                            style="font-size: 2.25rem; line-height: 1;"
                                                            title="Remover" aria-label="Remover">
                                                        <i class="bi bi-x"></i>
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                            }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private Alimento NovoAlimento { get; set; } = new Alimento();
    private List<Alimento> alimentos;
    private bool editando = false;

    protected override async Task OnInitializedAsync()
    {
        await ObterAlimentos();
    }

    private async Task ObterAlimentos() 
    {
        try
        {
            var response = await Http.GetAsync("api/alimento/obterTodosAlimentos");
            if (response.IsSuccessStatusCode)
            {
                alimentos = await response.Content.ReadFromJsonAsync<List<Alimento>>();
            }
            else
            {
                alimentos = new List<Alimento>();
            }
        }
        catch(Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Erro ao obter alimentos.");
        }
    }

    private async Task CadastrarAlimento()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/alimento/adicionar", NovoAlimento);

            if (response.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Alimento cadastrado com sucesso!");
                await ObterAlimentos(); 
                NovoAlimento = new Alimento();
                StateHasChanged();
            }
            else
            {
                var erro = await response.Content.ReadAsStringAsync();
                await JSRuntime.InvokeVoidAsync("alert", $"Erro ao cadastrar alimento.");
            }
        }
        catch (Exception ex)
        {
         
            await JSRuntime.InvokeVoidAsync("alert", $"Erro inesperado.");
        }
    }


    private async Task RemoverAlimento(Alimento alimento)
    {
        try
        {
            var response = await Http.PutAsync($"api/alimento/inativar/{alimento.Id}", null);
            if (response.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Alimento removido com sucesso!");
                await ObterAlimentos(); 
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Alimento não pode ser removido  com sucesso!");
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Erro ao remover alimento.");
        }
    }

    private void EditarAlimento(Alimento alimento)
    {
        NovoAlimento = new Alimento
            {
                Id = alimento.Id,
                Nome = alimento.Nome,
                Categoria = alimento.Categoria
            };
        editando = true;
    }

    private async Task AtualizarAlimento()
    {
        try
        {
            var response = await Http.PutAsJsonAsync($"api/alimento/atualizar/{NovoAlimento.Id}", NovoAlimento);
            if (response.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Alimento atualizado com sucesso!");
                await ObterAlimentos();
                NovoAlimento = new Alimento();
                editando = false;
                StateHasChanged();
            }
            else
            {
                var erro = await response.Content.ReadAsStringAsync();
                await JSRuntime.InvokeVoidAsync("alert", $"Erro ao atualizar alimento.");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Erro inesperado: {ex.Message}");
        }
    }
}