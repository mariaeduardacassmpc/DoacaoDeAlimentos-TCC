@page "/EditarUsuario"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthStateProvider
@using System.Text.RegularExpressions
@using TCCDoacaoDeAlimentos.Shared.Models
@using TCCDoacaoDeAlimentos.Shared.Dto
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization

<div class="min-vh-100 d-flex align-items-center" style="background-color: #d4edda;">
    <div class="container py-5">
        <div class="row justify-content-center">
            <div class="col-lg-8 col-md-10">
                <div class="card shadow">
                    <div class="card-body p-5">
                        <h1 class="card-title text-center">Editar Cadastro</h1>
                        <p class="text-center mb-4">Atualize suas informações</p>

                        @if (carregando)
                        {
                            <div>Carregando...</div>
                        }
                        else
                        {

                            <EditForm Model="@entidade" OnValidSubmit="@AtualizarEntidade">
                                <DataAnnotationsValidator />
                                <hr />

                                <div class="mb-3">
                                    <label for="nome" class="form-label d-flex align-items-center gap-2 text-success">
                                        <i class="bi bi-person-fill"></i> @(entidade.TpEntidade == "O" ? "Razão Social " : "Nome Completo ")
                                    </label>
                                    <InputText @bind-Value="entidade.RazaoSocial" class="form-control" id="nome"
                                               placeholder="@(entidade.TpEntidade == "O" ? "Razão Social" : "Nome Completo")" />
                                </div>

                                @if (entidade.TpEntidade == "O")
                                {
                                    <div class="mb-3">
                                        <label for="responsavel" class="form-label d-flex align-items-center gap-2 text-success">
                                            <i class="bi bi-person-fill"></i> Responsável 
                                        </label>
                                        <InputText @bind-Value="entidade.Responsavel" class="form-control" id="responsavel"
                                                   placeholder="Nome do responsável" />
                                    </div>
                                }
                             
                                @{
                                var documento = entidade.CNPJ_CPF?.Trim() ?? "";
                            }

                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <label for="sexo" class="form-label d-flex align-items-center gap-2 text-success">
                                        <i class="bi bi-gender-ambiguous"></i> Genero
                                    </label>
                                    <InputSelect @bind-Value="entidade.Sexo" class="form-select" id="sexo">
                                        <option value="" selected disabled>Selecione...</option>
                                        <option value="F">Feminino</option>
                                        <option value="M">Masculino</option>
                                    </InputSelect>
                                </div>
                                <div class="col-md-6">
                                    @if (documento.Length == 11)
                                    {
                                        <label for="cpf" class="form-label d-flex align-items-center gap-2 text-success">
                                            <i class="bi bi-credit-card-2-front-fill"></i> CPF
                                        </label>
                                        <InputText @bind-Value="entidade.CNPJ_CPF" class="form-control" id="cpf" placeholder="Somente números" maxlength="11" />
                                    }
                                    else
                                    {
                                        <label for="cnpj" class="form-label d-flex align-items-center gap-2 text-success">
                                            <i class="bi bi-file-earmark-text-fill"></i> CNPJ
                                        </label>
                                        <InputText @bind-Value="entidade.CNPJ_CPF" class="form-control" id="cnpj" placeholder="Somente números" maxlength="14" />
                                    }
                                </div>
                            </div>

                    
                                <div class="row mb-3">
                                    <div class="col-md-6">
                                        <label class="form-label d-flex align-items-center gap-2 text-success">
                                            <i class="bi bi-telephone-fill"></i> Telefone 
                                        </label>
                                        <MaskedInput @bind-Value="entidade.Telefone" Mask="(00) 00000-0000" Placeholder="(00) 00000-0000" />
                                    </div>
                                    <div class="col-md-6">
                                        <label class="form-label d-flex align-items-center gap-2 text-success">
                                            <i class="bi bi-envelope-fill"></i> E-mail 
                                        </label>
                                        <InputText @bind-Value="entidade.Email" class="form-control" id="email"
                                                   placeholder="contato@entidade.org" />
                                    </div>
                                </div>
                                <div class="row mb-3">
                                    <div class="col-md-6">
                                        <label class="form-label d-flex align-items-center gap-2 text-success">
                                            <i class="bi bi-geo-alt-fill"></i> CEP
                                        </label>
                                        <InputText @bind-Value="entidade.CEP" class="form-control" id="cep"
                                                   placeholder="CEP" maxlength="8" @onchange="BuscarEnderecoPorCep" />
                                    </div>
                                </div>
                                <div class="row mb-3">
                                    <div class="col-md-6">
                                        <label class="form-label d-flex align-items-center gap-2 text-success">
                                            <i class="bi bi-geo-alt-fill"></i> Cidade 
                                        </label>
                                        <InputText @bind-Value="entidade.Cidade" class="form-control" id="cidade"
                                                   placeholder="Sua cidade" />
                                    </div>
                                    <div class="col-md-6">
                                        <label class="form-label d-flex align-items-center gap-2 text-success">
                                            <i class="bi bi-geo-alt-fill"></i> Bairro 
                                        </label>
                                        <InputText @bind-Value="entidade.Bairro" class="form-control" id="bairro"
                                                   placeholder="Bairro" />
                                    </div>
                                </div>

                                <div class="row mb-3">
                                    <div class="col-md-10">
                                        <label class="form-label d-flex align-items-center gap-2 text-success">
                                            <i class="bi bi-geo-alt-fill"></i> Endereço 
                                        </label>
                                        <InputText @bind-Value="entidade.Endereco" class="form-control" id="endereco"
                                                   placeholder="Endereço completo" />
                                    </div>
                                </div>

                                <div class="mb-3">
                                <label for="senha" class="form-label d-flex align-items-center gap-2 text-success">
                                    <i class="bi bi-lock-fill"></i> Nova Senha
                                </label>
                                <InputText @bind-Value="entidade.Senha" class="form-control" id="senha" type="password" placeholder="Digite uma nova senha" />
                            </div>

                            <div class="text-end mt-3">
                                <button type="submit" class="btn btn-success btn-sm me-2">
                                    <i class="bi bi-check-circle-fill me-1"></i> Salvar Alterações
                                </button>
                                <button type="button" class="btn btn-cancelar btn-sm me-2" @onclick="Voltar">
                                    <i class="bi bi-x-circle-fill me-1"></i> Cancelar
                                </button>
                            </div>
                            </EditForm>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private Entidade entidade = new Entidade();
    private bool _showPassword = false;
    private bool carregando = true;

    protected override async Task OnInitializedAsync()
    {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            var idClaim = user.FindFirst("sub") ?? user.FindFirst("userid") ?? user.FindFirst(ClaimTypes.NameIdentifier);

            if (idClaim != null && int.TryParse(idClaim.Value, out int idUsuario))
            {
                entidade = await Http.GetFromJsonAsync<Entidade>($"api/entidade/obterPorId/{idUsuario}");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Usuário não autenticado.");
                Navigation.NavigateTo("/login");
            }
        
        carregando = false;
    }



    private async Task AtualizarEntidade()
    {
        try
        {
            var dadosParaEnvio = new EntidadeEdicaoDto
                {
                    Id = entidade.Id,
                    RazaoSocial = entidade.RazaoSocial,
                    Responsavel = entidade.Responsavel,
                    Email = entidade.Email,
                    Telefone = entidade.Telefone,
                    CNPJ_CPF = entidade.CNPJ_CPF,
                    Endereco = $"{entidade.Endereco}, {entidade.Numero}",
                    Bairro = entidade.Bairro,
                    Cidade = entidade.Cidade,
                    CEP = entidade.CEP,
                    Sexo = entidade.Sexo
                };

            var response = await Http.PutAsJsonAsync($"api/entidade/atualizar/{entidade.Id}", dadosParaEnvio);

            if (response.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Dados atualizados com sucesso!");
                Navigation.NavigateTo("/");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                await JSRuntime.InvokeVoidAsync("alert", $"Erro: {error}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Erro crítico: {ex.Message}");
        }
    }

    private string RemoveMask(string value) =>
        string.IsNullOrEmpty(value) ? value : Regex.Replace(value, @"[^\d]", "");

    private void ToggleAllPasswords() =>
        _showPassword = !_showPassword;

    private async Task BuscarEnderecoPorCep(ChangeEventArgs e)
    {
        var cep = RemoveMask(e.Value?.ToString() ?? "");
        if (string.IsNullOrWhiteSpace(cep) || cep.Length != 8) return;

        try
        {
            var response = await Http.GetFromJsonAsync<ViaCep>($"api/viacep/{cep}");
            if (response != null)
            {
                entidade.Bairro = response.Bairro;
                entidade.Cidade = response.Localidade;
                entidade.Endereco = response.Logradouro;
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "CEP não encontrado.");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Erro ao buscar CEP: {ex.Message}");
        }
    }

    private void Voltar()
    {
        Navigation.NavigateTo("/");
    }

    public class ViaCep
    {
        public string Logradouro { get; set; }
        public string Bairro { get; set; }
        public string Localidade { get; set; }
    }
}
