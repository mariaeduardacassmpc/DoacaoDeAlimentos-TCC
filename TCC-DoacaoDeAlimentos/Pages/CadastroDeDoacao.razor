@page "/CadastroDeDoacao"
@page "/CadastroDeDoacao/{Id:int}"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using System.Security.Claims
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@inject Blazored.Toast.Services.IToastService ToastService
@using TCCDoacaoDeAlimentos.Shared.Dto
@using TCCDoacaoDeAlimentos.Shared.Models
@using Microsoft.AspNetCore.Components.Authorization

<div class="min-vh-100 d-flex align-items-center" style="background-color: #d4edda;">
    <div class="container py-5">
        <div class="row justify-content-center">
            <div class="col-lg-8 col-md-10">
                <div class="card shadow">
                    <div class="card-body p-5">
                        <h1 class="card-title text-center">Cadastro de Doação</h1>
                        <h6 class="text-center mb-4">
                            Cadastre uma nova doação para beneficiar uma Instituição
                        </h6>

                        @if (erroSalvar)
                        {
                            <div class="alert alert-danger">
                                @mensagemErro
                                <button type="button" class="btn-close float-end" @onclick="() => erroSalvar = false"></button>
                            </div>
                        }

                        <EditForm Model="@NovaDoacao" OnValidSubmit="@SalvarDoacao">
                            <DataAnnotationsValidator />
                            <hr />
                            <h2 class="border-bottom pb-2 mb-4 mt-5">Informações da Doação</h2>
                            <div class="row">
                                <div class="col-md-8 mb-3">
                                    <label for="entidade" class="form-label">Instituição Beneficiada</label>
                                    <InputSelect @bind-Value="NovaDoacao.IdOng" class="form-control" id="entidade">
                                        <option value="">Selecione a Instituição...</option>
                                        @foreach (var ong in Ongs)
                                        {
                                            <option value="@ong.Id">@ong.RazaoSocial</option>
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="@(() => NovaDoacao.IdOng)" class="text-danger" />
                                </div>

                                <div class="col-md-4 mb-3">
                                    <label for="dataDoacao" class="form-label">Data da Doação</label>
                                    <InputDate @bind-Value="NovaDoacao.DataDoacao" class="form-control" id="dataDoacao"
                                               @attributes="@(new Dictionary<string, object> { ["min"] = DateTime.Today.ToString("yyyy-MM-dd") })" />
                                    <ValidationMessage For="@(() => NovaDoacao.DataDoacao)" class="text-danger" />
                                </div>
                            </div>

                            <div class="mb-3">
                                <label for="observacao" class="form-label">Observações</label>
                                <InputTextArea @bind-Value="NovaDoacao.Observacao" class="form-control" id="observacao" placeholder="Informações adicionais sobre a doação" />
                            </div>

                            <h3 class="border-bottom pb-2 mb-4 mt-5">Itens da Doação</h3>

                            @foreach (var item in Itens)
                            {
                                <div class="border p-3 mb-4 rounded bg-light position-relative">
                                    <button type="button" class="btn-close position-absolute top-0 end-0 m-2" @onclick="() => RemoverItem(item)" title="Remover Item"></button>
                                    <div class="row g-3">
                                        <div class="col-md-6">
                                            <label class="form-label">Alimento</label>
                                            <InputSelect @bind-Value="item.AlimentoId" class="form-control">
                                                <option value="0">Selecione o alimento...</option>
                                                @foreach (var alimento in Alimentos)
                                                {
                                                    <option value="@alimento.Id">@alimento.Nome (@alimento.Categoria)</option>
                                                }
                                            </InputSelect>
                                            @if (erroSalvar && item.AlimentoId == 0)
                                            {
                                                <div class="text-danger">Alimento é obrigatório.</div>
                                            }
                                        </div>

                                        <div class="col-md-3">
                                            <label class="form-label">Quantidade</label>
                                            <InputNumber @bind-Value="item.Quantidade" class="form-control" min="1" />
                                            @if (erroSalvar && item.Quantidade <= 0)
                                            {
                                                <div class="text-danger">Quantidade deve ser maior que 0.</div>
                                            }
                                        </div>

                                        <div class="col-md-3">
                                            <label class="form-label">Unidade</label>
                                            <InputSelect @bind-Value="item.UnidadeMedida" class="form-control">
                                                <option value="">Selecione...</option>
                                                <option value="Kg">Kg</option>
                                                <option value="g">g</option>
                                                <option value="L">L</option>
                                                <option value="ml">ml</option>
                                                <option value="Unidades">Unidades</option>
                                            </InputSelect>
                                            @if (erroSalvar && string.IsNullOrWhiteSpace(item.UnidadeMedida))
                                            {
                                                <div class="text-danger">Unidade é obrigatória.</div>
                                            }
                                        </div>

                                        <div class="col-md-4">
                                            <label class="form-label">Validade</label>
                                            <InputDate @bind-Value="item.Validade" class="form-control"
                                                       @attributes="@(new Dictionary<string, object> { ["min"] = DateTime.Today.ToString("yyyy-MM-dd") })" />
                                            @if (erroSalvar && (item.Validade < new DateTime(2025, 4, 10) || item.Validade > new DateTime(2030, 12, 31)))
                                            {
                                                <div class="text-danger">A validade deve estar entre 10/04/2025 e 31/12/2030.</div>
                                            }
                                        </div>
                                    </div>
                                </div>
                            }

                            <div class="text-center mt-4">
                                <button type="button" class="btn btn-success" @onclick="AdicionarItem">
                                    <i class="bi bi-plus-circle me-2"></i>Adicionar Item
                                </button>
                            </div>

                            <div class="d-grid mt-4">
                                <button type="submit" class="btn btn-outline-success btn-lg" disabled="@(usuarioAutenticado ? null : true)">
                                    Salvar Doação
                                </button>
                                @if (!usuarioAutenticado)
                                {
                                    <div class="text-danger mt-2 text-center">
                                        Você precisa estar logado para realizar uma doação.
                                    </div>
                                }
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private ClaimsPrincipal usuarioLogado;
    private bool usuarioAutenticado = false;

    private Doacao NovaDoacao { get; set; } = new Doacao();
    private List<AlimentoDoacao> Itens { get; set; } = new();
    private List<Entidade> Ongs { get; set; } = new();
    private OngDto? OngSelecionada { get; set; }
    private List<Alimento> Alimentos { get; set; } = new();
    private bool erroSalvar = false;
    private string mensagemErro = string.Empty;
    [Parameter]
    public int? Id { get; set; } 

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            usuarioLogado = authState.User;
            usuarioAutenticado = usuarioLogado.Identity?.IsAuthenticated == true;

            var idUsuario = usuarioLogado.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (!string.IsNullOrEmpty(idUsuario) && int.TryParse(idUsuario, out int idDoador))
            {
                NovaDoacao.IdDoador = idDoador;
            }

            if (!usuarioAutenticado)
            {
                await JSRuntime.InvokeVoidAsync("Alertas.mostrarAlerta", "A doação só pode ser feita por usuários logados!");
                Navigation.NavigateTo("/login");
            }

            Ongs = await Http.GetFromJsonAsync<List<Entidade>>("api/entidade/obterTodasInstituicoes");
            Alimentos = await Http.GetFromJsonAsync<List<Alimento>>("api/alimento/obterTodosAlimentos");

            if (Ongs == null || !Ongs.Any())
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Nenhuma Instituição cadastrada ainda.");
            }

            if (Id.HasValue)
            {
                try
                {
                    OngSelecionada = await Http.GetFromJsonAsync<OngDto>($"api/entidade/obterPorId/{Id}");
                    if (OngSelecionada != null)
                    {
                        NovaDoacao.IdOng = OngSelecionada.Id;
                    }
                }
                catch (Exception ex)
                {
                    await JSRuntime.InvokeVoidAsync("alert", $"Erro ao carregar a Instituição.");
                }
            }
         }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Erro ao carregar a Instituição.");
        }
    }
    
    private void AdicionarItem()
    {
        Itens.Add(new AlimentoDoacao
            {
                Validade = DateTime.Today,
                Quantidade = 1,
                AlimentoId = 0
            });
    }

    private void RemoverItem(AlimentoDoacao item)
    {
        Itens.Remove(item);
    }

    private async Task SalvarDoacao()
    {
        if (!usuarioAutenticado)
        {
            erroSalvar = true;
            mensagemErro = "Você precisa estar logado para realizar uma doação.";
            return;
        }

        erroSalvar = false;
        if (NovaDoacao.IdOng == 0 ||
            NovaDoacao.DataDoacao == default ||
            Itens.Count == 0 ||
            Itens.Any(i => i.AlimentoId == 0 || i.Quantidade <= 0 || string.IsNullOrWhiteSpace(i.UnidadeMedida)))
        {
            erroSalvar = true;
            mensagemErro = "Preencha todos os campos obrigatórios da doação e dos itens.";
            ToastService.ShowError(mensagemErro);
            return;
        }

        try
        {
            NovaDoacao.Alimentos = Itens;
            var response = await Http.PostAsJsonAsync("api/doacao/adicionar", NovaDoacao);

            if (response.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Doação cadastrada com sucesso!");
                Navigation.NavigateTo("/MinhasDoacoes");
            }
            else
            {
                var erro = await response.Content.ReadAsStringAsync();
                await JSRuntime.InvokeVoidAsync("alert", "Erro ao realizar doação.");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Erro ao realizar doação.");
        }
    }
}