@page "/MinhasDoacoes"
@* @using Microsoft.AspNetCore.Components.Authorization *@
@inject NavigationManager Navigation
@inject HttpClient Http
@* @inject AuthenticationStateProvider AuthenticationStateProvider *@
@using TCCDoacaoDeAlimentos.Shared.Models;

<div class="min-vh-100" style="background-color: #d4edda;">
    <div class="container py-5">
        <div class="row justify-content-center">
            <div class="col-lg-10">
                <div class="card shadow">
                    <div class="card-body p-5">
                        <div class="d-flex justify-content-between align-items-center mb-4">
                            <h1 class="card-title mb-0">
                                @(TipoUsuario == "O" ? "Doações Recebidas" : "Minhas Doações")
                            </h1>
                            @if (TipoUsuario == "F" || TipoUsuario == "J")
                            {
                                <button class="btn btn-success" @onclick="NavigateToCadastro">
                                    <i class="bi bi-plus-circle me-2"></i>Nova Doação
                                </button>
                            }
                        </div>

                        <div class="row">
                            @if (TipoUsuario == "F" || TipoUsuario == "J")
                            {
                                <div class="col-md-4">
                                    <label class="form-label">Filtrar por ONG</label>
                                    <select class="form-select" @bind="Filtro.IdOng">
                                        <option value="">Todas</option>
                                        @foreach (var ong in ListaDeOngs)
                                        {
                                            <option value="@ong.Id.ToString()">@ong.RazaoSocial</option>
                                        }
                                    </select>
                                </div>
                            }
                            <div class="col-md-4">
                                <label class="form-label">Filtrar por Status</label>
                                <select class="form-select" @bind="Filtro.Status">
                                    <option value="">Todos</option>
                                    @foreach (var status in ListaDeStatus)
                                    {
                                        <option value="@status">@status</option>
                                    }
                                </select>
                            </div>
                            <div class="col-md-4">
                                <label class="form-label">Data da Doação</label>
                                <input type="date" class="form-control" @bind="Filtro.DataDoacao" />
                            </div>
                        </div>

                        <div class="my-5"></div>
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead class="table-light">
                                    <tr>
                                        <th>ID</th>
                                        <th>ONG</th>
                                        <th>Data</th>
                                        <th>Itens</th>
                                        <th>Status</th>
                                        <th>Detalhes</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var doacao in DoacoesFiltradas)
                                    {
                                        <tr>
                                            <td>@doacao.IdDoacao</td>
                                            <td>@ObterNomeOng(doacao.IdOng)</td>
                                            <td>@doacao.DataDoacao.ToString("dd/MM/yyyy")</td>
                                            <td>
                                                <ul class="list-unstyled">
                                                    @foreach (var item in doacao.Alimentos)
                                                    {
                                                        <li>
                                                            @ObterNomeAlimento(item.AlimentoId) -
                                                            @item.Quantidade @item.UnidadeMedida
                                                        </li>
                                                    }
                                                </ul>
                                            </td>
                                            <td>
                                                <span class="badge @GetStatusBadgeClass(doacao.Status)">
                                                    @doacao.Status
                                                </span>
                                            </td>
                                            <td>
                                                <button class="btn btn-sm btn-outline-info"
                                                        @onclick="() => VerDetalhes(doacao.IdDoacao)">
                                                    Detalhes
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        @if (!DoacoesFiltradas.Any())
                        {
                            <div class="alert alert-success text-center">
                                Nenhuma doação encontrada.
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private FiltroDoacaoDto Filtro { get; set; } = new();
    private List<Doacao> DoacoesSalvas = new();
    private List<Entidade> ListaDeOngs = new();
    private List<string> ListaDeStatus = new() { "Pendente", "Confirmada", "Cancelada" };
    private string TipoUsuario;

    private void NavigateToCadastro()
    {
        Navigation.NavigateTo("/CadastroDeDoacao");
    }

    protected override async Task OnInitializedAsync()
    {
        // var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        // var user = authState.User;

        // if (user.Identity.IsAuthenticated)
        // {
        //     TipoUsuario = user.FindFirst("tipo")?.Value;
        // }

        await CarregarDadosIniciais();
    }

    private async Task CarregarDadosIniciais()
    {
        try
        {
            Console.WriteLine("⏳ Iniciando carregamento de dados...");

            TipoUsuario = "F";
            Filtro = new FiltroDoacaoDto
                {
                    IdDoador = 1
                };

            // Exibe o JSON que está sendo enviado
            var jsonEnviado = System.Text.Json.JsonSerializer.Serialize(Filtro);
            Console.WriteLine($"📤 Enviando filtro para API: {jsonEnviado}");

            var response = await Http.PostAsJsonAsync("api/doacao/filtrarDoacao", Filtro);

            Console.WriteLine($"📥 Resposta da API: {(int)response.StatusCode} {response.StatusCode}");

            if (response.IsSuccessStatusCode)
            {
                DoacoesSalvas = await response.Content.ReadFromJsonAsync<List<Doacao>>();
                Console.WriteLine($"✅ Doações carregadas: {DoacoesSalvas.Count}");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"❌ Erro ao carregar doações: {response.StatusCode}");
                Console.WriteLine($"🔎 Conteúdo do erro: {errorContent}");
            }

            Console.WriteLine("📡 Carregando lista de ONGs...");
            ListaDeOngs = await Http.GetFromJsonAsync<List<Entidade>>("api/entidade/obterTodas");
            Console.WriteLine($"✅ ONGs carregadas: {ListaDeOngs.Count}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"🔥 Erro inesperado: {ex.Message}");
        }
    }


    private IEnumerable<Doacao> DoacoesFiltradas =>
     DoacoesSalvas
         .Where(d => !Filtro.IdOng.HasValue || d.IdOng == Filtro.IdOng.Value)
         .Where(d => !Filtro.Status.HasValue || (int)d.Status == Filtro.Status.Value)
         .Where(d => Filtro.DataDoacao.HasValue
             ? d.DataDoacao.Date == Filtro.DataDoacao.Value.Date
             : true)
         .OrderByDescending(d => d.DataDoacao);


    private string ObterNomeOng(int idOng)
    {
        return ListaDeOngs.FirstOrDefault(o => o.Id == idOng)?.RazaoSocial ?? "Desconhecida";
    }

    private string ObterNomeAlimento(int alimentoId)
    {
        return $"Alimento {alimentoId}";
    }

    private string GetStatusBadgeClass(StatusDoacao status)
    {
        return status switch
        {
            StatusDoacao.Pendente => "bg-warning text-dark",
            StatusDoacao.Finalizada => "bg-success",
            StatusDoacao.Cancelada => "bg-danger",
            _ => "bg-secondary"
        };
    }


    private void VerDetalhes(int idDoacao)
    {
        // Ação para ver detalhes
    }
}
