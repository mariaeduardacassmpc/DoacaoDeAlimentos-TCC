@page "/MinhasDoacoes"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@using System.Security.Claims
@using TCCDoacaoDeAlimentos.Shared.Models;
@using TCCDoacaoDeAlimentos.Shared.Dto;
@using Microsoft.AspNetCore.Components.Authorization

<div class="min-vh-100" style="background-color: #d4edda;">
    <div class="container py-5">
        <div class="row justify-content-center">
            <div class="col-lg-10">
                <div class="card shadow">
                    <div class="card-body p-5">
                        <div class="d-flex justify-content-between align-items-center mb-4">
                            <h1 class="card-title mb-0">
                                <i class="bi bi-box-seam me-2 text-success"></i>
                                @(TpEntidade == "O" ? "Doações Recebidas" : "Minhas Doações")
                            </h1>

                            @if (TpEntidade == "D")
                            {
                                <button class="btn btn-success" @onclick="NavigateToCadastro">
                                    <i class="bi bi-plus-circle me-2"></i>Nova Doação
                                </button>
                            }
                        </div>

                        <div class="row mb-4">
                            @if (TpEntidade == "D")
                            {
                                <div class="col-md-4">
                                    <label class="form-label">Filtrar por Instituição</label>
                                    <select class="form-select" @bind="Filtro.IdOng">
                                        <option value="">Todas</option>
                                        @foreach (var ong in ListaDeOngs)
                                        {
                                            <option value="@ong.Id.ToString()">@ong.NomeFantasia</option>
                                        }
                                    </select>
                                </div>
                            }
                            <div class="col-md-4 d-flex align-items-end">
                                <div class="flex-grow-1 me-2">
                                    <label class="form-label">Filtrar por Status</label>
                                    <select class="form-select" @bind="Filtro.Status">
                                        <option value="">Todos</option>
                                        <option value="1">Pendente</option>
                                        <option value="2">Cancelada</option>
                                        <option value="3">Finalizada</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <label class="form-label">Data da Doação</label>
                                <div class="d-flex align-items-center">
                                    <input type="date" class="form-control me-2" @bind="Filtro.DataDoacao" />
                                </div>
                            </div>
                        </div>

                        <div class="my-5"></div>
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead class="table-light">
                                    <tr>
                                        <th>ID</th>
                                        <th>ONG</th>
                                        <th>Data</th>
                                        <th>Status</th>
                                        <th>Ações</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var doacao in DoacoesFiltradas)
                                    {
                                        <tr>
                                            <td>@doacao.Id</td>
                                            <td>@ObterNomeOng(doacao.IdOng)</td>
                                            <td>@doacao.DataDoacao.ToString("dd/MM/yyyy")</td>
                                            <td>
                                                <span class="badge @GetStatusBadgeClass(doacao.Status)">
                                                    @doacao.Status
                                                </span>
                                            </td>
                                            <td>
                                                <button class="btn btn-outline-success btn-sm me-1"
                                                        @onclick="() => VerDetalhes(doacao.Id)">
                                                    Detalhes
                                                </button>
                                            </td>
                                        </tr>
                                    }

                                </tbody>
                            </table>
                        </div>

                        @if (!DoacoesFiltradas.Any())
                        {
                            @if (!UsuarioLogado)
                            {
                                <div class="alert alert-success text-center">
                                    Nenhuma doação encontrada. Faça Login para poder visualizar as doações
                                </div>
                            }
                            else if (!DoacoesFiltradas.Any())
                            {
                                <div class="alert alert-success text-center">
                                    Nenhuma doação encontrada.
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal de Detalhes -->
@if (MostrarModal)
{
    <div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5);" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header bg-light">
                    <h5 class="modal-title">Detalhes da Doação #@(DoacaoSelecionada?.Id ?? 0)</h5>
                    <button type="button" class="btn-close" @onclick="FecharModal"></button>
                </div>
                <div class="modal-body">
                    @if (DoacaoSelecionada != null)
                    {
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <h6>@(TpEntidade == "O" ? "Informações do Doador" : "Informações da Instituição")</h6>
                                @if (TpEntidade == "O")
                                {
                                    <p><strong>Nome:</strong> @(DoadorSelecionado != null && !string.IsNullOrWhiteSpace(DoadorSelecionado.NomeFantasia) ? DoadorSelecionado.NomeFantasia : "Desconhecido")</p>
                                    <p>
                                        <i class="bi bi-telephone-fill ms-1"></i>
                                        <strong>Telefone:</strong>
                                        @(string.IsNullOrWhiteSpace(DoadorSelecionado?.Telefone)
                                            ? "Não informado"
                                            : DoadorSelecionado.Telefone)
                                    </p>
                                    <p>
                                        <i class="bi bi-envelope-fill ms-1"></i>
                                        <strong>Email:</strong>
                                        @(string.IsNullOrWhiteSpace(DoadorSelecionado?.Email)
                                            ? "Não informado"
                                            : DoadorSelecionado.Email)
                                    </p>
                                }
                                else
                                {
                                    <p><strong>Nome:</strong> @ObterNomeOng(DoacaoSelecionada.IdOng)</p>
                                    <p>
                                        <strong>Responsável: </strong>
                                        @if (OngSelecionada != null && !string.IsNullOrEmpty(OngSelecionada.Responsavel))
                                        {
                                            @OngSelecionada.Responsavel
                                        }
                                        else
                                        {
                                            <span class="text-muted">Não informado</span>
                                        }
                                    </p>
                                    <p>
                                        <i class="bi bi-telephone-fill ms-1"></i><strong> Telefone: </strong>
                                        @if (!string.IsNullOrWhiteSpace(OngSelecionada?.Telefone))
                                        {
                                            <a href="tel:@OngSelecionada.Telefone" style="text-decoration: underline; color: #000;">
                                                @OngSelecionada.Telefone
                                            </a>
                                        }
                                        else
                                        {
                                            <span class="text-muted">Não informado</span>
                                        }
                                    </p>
                                    <p>
                                        <i class="bi bi-geo-alt-fill ms-1"></i><strong> Endereço: </strong>
                                        @if (!string.IsNullOrWhiteSpace(OngSelecionada?.Endereco))
                                        {
                                            <a href="https://www.google.com/maps/search/@(Uri.EscapeDataString(OngSelecionada.Endereco))" target="_blank" rel="noopener"
                                               style="text-decoration: underline; color: #000;">
                                                @OngSelecionada.Endereco
                                            </a>
                                        }
                                        else
                                        {
                                            <span class="text-muted">Não informado</span>
                                        }
                                    </p>
                                }
                            </div>
                            <div class="col-md-6">
                                <h6>Informações da Doação</h6>
                                <p><strong>Data:</strong> @DoacaoSelecionada.DataDoacao.ToString("dd/MM/yyyy")</p>
                                <p>
                                    <strong>Observação:</strong>
                                    @(!string.IsNullOrWhiteSpace(DoacaoSelecionada.Observacao)
                                        ? DoacaoSelecionada.Observacao : "Nenhuma observação")
                                </p>
                               
                                <p><strong>Status:</strong> <span class="badge @GetStatusBadgeClass(DoacaoSelecionada.Status)">@DoacaoSelecionada.Status</span></p>
                            </div>
                        </div>

                        <div class="border-top pt-3">
                            <h6>Alimentos Doados</h6>
                            <table class="table table-sm">
                                <thead>
                                    <tr>
                                        <th class="ps-4">Alimento</th>
                                        <th class="ps-4">Quantidade</th>
                                        <th class="ps-4">Unidade</th>
                                        <th class="ps-4">Validade</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in DoacaoSelecionada.Alimentos)
                                    {
                                        <tr>
                                            <td class="ps-4">@ObterNomeAlimento(item.AlimentoId)</td>
                                            <td class="ps-4">@item.Quantidade</td>
                                            <td class="ps-4">@item.UnidadeMedida</td>
                                            <td class="ps-4">@item.Validade.ToString("dd/MM/yyyy")</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>

                        </div>
                    }
                </div>
                <div class="modal-footer">
                    @if (DoacaoSelecionada != null && DoacaoSelecionada.Status == StatusDoacao.Pendente)
                    {
                        @if (TpEntidade == "O")
                        {
                            <button type="button" class="btn btn-success me-2" @onclick="() => FinalizarDoacao(DoacaoSelecionada.Id)">Finalizar</button>
                        }
                        <button type="button" class="btn btn-danger me-2" @onclick="AbrirModalMotivo">Cancelar Doação</button>
                    }
                </div>
            </div>
        </div>
    </div>
}
@if (MostrarModalMotivo)
{
    <div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5);" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-light">
                    <h5 class="modal-title">Motivo do Cancelamento</h5>
                    <button type="button" class="btn-close" @onclick="FecharModalMotivo"></button>
                </div>
                <div class="modal-body">
                    <p>Selecione o motivo do cancelamento:</p>
                    @foreach (var motivo in Motivos)
                    {
                        <div class="form-check mb-2">
                            <input class="form-check-input" type="radio" id="@motivo" name="motivoCancelamento"
                                   value="@motivo" @onchange="() => MotivoCancelamento = motivo"
                                   checked="@(MotivoCancelamento == motivo)" />
                            <label class="form-check-label" for="@motivo">@motivo</label>
                        </div>
                    }

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary me-2" @onclick="FecharModalMotivo">Voltar</button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmarCancelamento" disabled="@string.IsNullOrEmpty(MotivoCancelamento)">Confirmar Cancelamento</button>
                </div>
            </div>
        </div>
    </div>
}


@code {
    private FiltroDoacaoDto Filtro { get; set; } = new();
    private List<Doacao> DoacoesSalvas = new();
    private List<OngDto> ListaDeOngs = new();
    private List<Alimento> ListaDeAlimentos = new();
    private string TpEntidade;
    private bool MostrarModal { get; set; } = false;
    private Doacao DoacaoSelecionada { get; set; }
    private OngDto? OngSelecionada { get; set; }
    private bool MostrarModalMotivo { get; set; } = false;
    private string? MotivoCancelamento { get; set; }
    private bool UsuarioLogado { get; set; }
    private UsuarioDto? DoadorSelecionado { get; set; }
    private int? IdDoador { get; set; }

    private string[] MotivosDoador = new[]
    {
        "Mudança de planos",
        "Problemas pessoais",
        "Erro no cadastro da doação",
        "Outro motivo"
    };

    private string[] MotivosOng = new[]
    {
        "Alimento estragou/perdeu a validade",
        "Problemas logísticos (transporte, horário)",
        "Erro no cadastro da doação",
        "Instituição não entrou em contato/desistiu",
        "Doador desistiu",
        "Mudança de planejamento pessoal",
        "Preocupação com a qualidade do alimento",
        "Outro motivo"
    };

    private string[] Motivos => TpEntidade == "O" ? MotivosOng : MotivosDoador;

    private void NavigateToCadastro()
    {
        Navigation.NavigateTo("/CadastroDeDoacao");
    }

    protected override async Task OnInitializedAsync()
    {
        var token = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "token");
        UsuarioLogado = !string.IsNullOrEmpty(token);

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            var idClaim = user.FindFirst("sub") ?? user.FindFirst("userid") ?? user.FindFirst(ClaimTypes.NameIdentifier);
            var tpEntidadeClaim = user.FindFirst("TpEntidade");
            TpEntidade = tpEntidadeClaim?.Value ?? "";

            if (idClaim != null && int.TryParse(idClaim.Value, out int idUsuario))
            {
                if (TpEntidade == "D") 
                {
                    Filtro = new FiltroDoacaoDto { IdDoador = idUsuario };
                    IdDoador = idUsuario;
                }
                else if (TpEntidade == "O")
                    Filtro = new FiltroDoacaoDto { IdOng = idUsuario };
            }
        }

        await ObterAlimentos();
        await ObterInstituicoes();
        await ObterDoacoes();
    }

    private async Task ObterInstituicoes()
    {
        try
        {
            ListaDeOngs = await Http.GetFromJsonAsync<List<OngDto>>(
                $"api/entidade/ObterTodasInstituicoes"
            ) ?? new List<OngDto>();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Erro ao obter instituições.");
            ListaDeOngs = new List<OngDto>();
        }
    }


    private async Task ObterAlimentos()
    {
        try
        {
            ListaDeAlimentos = await Http.GetFromJsonAsync<List<Alimento>>("api/alimento/obterTodosAlimentos");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar alimentos: {ex.Message}");
            ListaDeAlimentos = new List<Alimento>();
        }
    }

    private async Task ObterDoacoes()
    {
        if ((TpEntidade == "D" && (Filtro.IdDoador == null || Filtro.IdDoador == 0)) ||
            (TpEntidade == "O" && (Filtro.IdOng == null || Filtro.IdOng == 0)))
        {
            DoacoesSalvas = new List<Doacao>();
            return;
        }

        try
        {
            var response = await Http.PostAsJsonAsync("api/doacao/filtrarDoacao", Filtro);

            if (response.IsSuccessStatusCode)
            {
                DoacoesSalvas = await response.Content.ReadFromJsonAsync<List<Doacao>>();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Erro ao carregar doações");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Erro ao carregar doações");
        }
    }

    private IEnumerable<Doacao> DoacoesFiltradas =>
        DoacoesSalvas
            .Where(d => !Filtro.IdOng.HasValue || d.IdOng == Filtro.IdOng.Value)
            .Where(d => !Filtro.Status.HasValue || (int)d.Status == Filtro.Status.Value)
            .Where(d => Filtro.DataDoacao.HasValue
                ? d.DataDoacao.Date == Filtro.DataDoacao.Value.Date
                : true)
            .Where(d => !IdDoacaoFiltro.HasValue || d.Id == IdDoacaoFiltro.Value)
            .OrderByDescending(d => d.DataDoacao);

    private int? IdDoacaoFiltro { get; set; }

    private string ObterNomeOng(int idOng)
    {
        return ListaDeOngs.FirstOrDefault(o => o.Id == idOng)?.NomeFantasia ?? "Desconhecida";
    }

    private string ObterNomeAlimento(int alimentoId)
    {
        return ListaDeAlimentos.FirstOrDefault(a => a.Id == alimentoId)?.Nome ?? $"Alimento {alimentoId}";
    }

    private string GetStatusBadgeClass(StatusDoacao status)
    {
        return status switch
        {
            StatusDoacao.Pendente => "bg-warning",
            StatusDoacao.Finalizada => "bg-success",
            StatusDoacao.Cancelada => "bg-danger",
            _ => "bg-secondary"
        };
    }

    private void AbrirModalMotivo()
    {
        MostrarModalMotivo = true;
    }

    private async Task VerDetalhes(int idDoacao)
    {
        DoacaoSelecionada = DoacoesFiltradas.FirstOrDefault(d => d.Id == idDoacao);

        if (DoacaoSelecionada != null)
        {
            if (TpEntidade == "O")
            {
                DoadorSelecionado = await Http.GetFromJsonAsync<UsuarioDto>($"api/usuario/{DoacaoSelecionada.IdDoador}");
            }
            else
            {
                OngSelecionada = ListaDeOngs.FirstOrDefault(o => o.Id == DoacaoSelecionada.IdOng);
            }
            var alimentos = await Http.GetFromJsonAsync<List<AlimentoDoacao>>($"api/alimentoDoacao/obterTodosPorDoacao/{idDoacao}");
            DoacaoSelecionada.Alimentos = alimentos ?? new List<AlimentoDoacao>();
            MostrarModal = true;
            StateHasChanged();
        }
    }

    private void FecharModal()
    {
        MostrarModal = false;
        StateHasChanged();
    }

    private void FecharModalMotivo()
    {
        MostrarModalMotivo = false;
        MotivoCancelamento = null;
    }

    private async void ConfirmarCancelamento()
    {
        if (DoacaoSelecionada == null || string.IsNullOrEmpty(MotivoCancelamento))
            return;

        var response = await Http.PutAsJsonAsync($"api/doacao/cancelarDoacao/{DoacaoSelecionada.Id}", MotivoCancelamento);

        if (response.IsSuccessStatusCode)
        {
            var doacao = DoacoesSalvas.FirstOrDefault(d => d.Id == DoacaoSelecionada.Id);
            if (doacao != null)
                doacao.Status = StatusDoacao.Cancelada;
            await JSRuntime.InvokeVoidAsync("alert", "Doação cancelada!");

        }

        MostrarModalMotivo = false;
        MostrarModal = false;
        MotivoCancelamento = null;
        StateHasChanged();
    }

    private async Task FinalizarDoacao(int idDoacao)
    {
        var confirm = await JSRuntime.InvokeAsync<bool>("confirm", "Deseja realmente finalizar esta doação?");
        if (!confirm)
            return;

        var response = await Http.PutAsJsonAsync($"api/doacao/atualizar/{idDoacao}", new Doacao { Id = idDoacao, Status = StatusDoacao.Finalizada });

        if (response.IsSuccessStatusCode)
        {
            var doacao = DoacoesSalvas.FirstOrDefault(d => d.Id == idDoacao);
            if (doacao != null)
                doacao.Status = StatusDoacao.Finalizada;

            StateHasChanged();
            await JSRuntime.InvokeVoidAsync("alert", "Doação finalizada com sucesso!");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "Erro ao finalizar doação.");
        }
    }

    private async Task BaixarRelatorioPdf()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/relatorio/gerarPdf", DoacoesFiltradas.ToList());

            if (response.IsSuccessStatusCode)
            {
                var fileBytes = await response.Content.ReadAsByteArrayAsync();
                var base64 = Convert.ToBase64String(fileBytes);
                var fileName = $"RelatorioDoacoes_{DateTime.Now:yyyyMMdd_HHmmss}.pdf";

                await JSRuntime.InvokeVoidAsync("blazorDownloadFile", fileName, "application/pdf", base64);
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Erro ao gerar o relatório.");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Erro ao gerar o relatório: {ex.Message}");
        }
    }
}