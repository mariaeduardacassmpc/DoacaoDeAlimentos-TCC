@page "/login"
@using Blazored.Modal
@using Blazored.Modal.Services
@using TCCDoacaoDeAlimentos.Shared.Models
@using TCCDoacaoDeAlimentos.Shared.Autenticacao
@using Microsoft.AspNetCore.Components.Authorization
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthStateProvider
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<div class="login-container" style="background-color: #d4edda; min-height: 100vh;">
    <div class="container py-5">
        <div class="row justify-content-center">
            <div class="col-md-6 col-lg-5">
                <div class="card shadow-lg rounded-4">
                    <div class="card-body p-5">
                        <div class="text-center mb-4">
                            <i class="bi bi-box2-heart" style="font-size: 3rem; color: #198754;"></i>
                            <h2 class="mt-3 fw-bold">Acesse sua conta</h2>
                            <p class="text-muted">Entre para gerenciar suas doações</p>
                        </div>

                        <EditForm Model="@usuario" OnValidSubmit="@RealizarLogin">
                            <DataAnnotationsValidator />

                            <div class="mb-3">
                                <label for="email" class="form-label">E-mail</label>
                                <InputText id="email" @bind-Value="usuario.Email" class="form-control" placeholder="seu@email.com" />
                                <ValidationMessage For="@(() => usuario.Email)" class="text-danger" />
                            </div>

                            <div class="mb-4">
                                <label for="password" class="form-label">Senha</label>
                                <div class="position-relative">
                                    <InputText type="@(_showPassword ? "text" : "password")"
                                    @bind-Value="usuario.Senha"
                                    class="form-control pe-5"
                                    placeholder="••••••••" id="password" />
                                    <button type="button" class="btn position-absolute top-50 end-0 translate-middle-y bg-transparent border-0"
                                    @onclick="TogglePasswordVisibility">
                                        <i class="@(_showPassword ? "fas fa-eye" : "fas fa-eye-slash") text-success"></i>
                                    </button>
                                </div>
                                <ValidationMessage For="@(() => usuario.Senha)" class="text-danger" />
                            </div>

                            <div class="d-grid mb-3">
                                <button type="submit" class="btn btn-success btn-lg">
                                    <i class="bi bi-box-arrow-in-right me-2"></i> Entrar
                                </button>
                            </div>

                            <div class="text-center">
                                <NavLink href="/recuperarSenha" class="text-decoration-none">Esqueceu sua senha?</NavLink>
                                <p class="mt-3">
                                    Não tem conta?
                                    <button type="button" class="btn btn-link text-success fw-semibold p-0" @onclick="IrParaCadastro">
                                        Cadastre-se
                                    </button>
                                </p>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private Usuario usuario = new Usuario();
    private bool _showPassword = false;
    private string mensagem = "";
    private bool sucesso = false;
    private bool carregando = false;

    private void IrParaCadastro()
    {
        Navigation.NavigateTo("/CadastroDeEntidade");
    }

    private async Task RealizarLogin()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("/login", usuario);
            if (response.IsSuccessStatusCode)
            {
                var usuarioLogado = await response.Content.ReadFromJsonAsync<UsuarioLogado>();
                if (usuarioLogado != null)
                {
                    await sessionStorage.SetItemAsStringAsync("token", usuarioLogado.Token);
                    var authProvider = (JwtAuthenticationStateProvider)AuthStateProvider;
                    authProvider.NotifyUserAuthentication(usuarioLogado.Token);

                    sucesso = true;
                    await Task.Yield();
                    Navigation.NavigateTo("/", true);
                }
                else
                {
                    var erro = await response.Content.ReadAsStringAsync();
                    mensagem = "Credenciais inválidas.";
                }
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                await JSRuntime.InvokeVoidAsync("alert", $"Erro no login.");
            }
        }
        catch (Exception ex)
        {
            mensagem = "Erro inesperado.";
        }

        carregando = false;
    }

    private void TogglePasswordVisibility()
    {
        _showPassword = !_showPassword;
    }
}
