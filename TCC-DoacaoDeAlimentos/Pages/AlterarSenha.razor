@page "/alterarsenha"
@using Blazored.Modal
@using Blazored.Modal.Services
@using System.ComponentModel.DataAnnotations
@using TCCDoacaoDeAlimentos.Shared.Models
@inject HttpClient Http
@inject NavigationManager Navigation
@inject Blazored.Toast.Services.IToastService ToastService
@inject IJSRuntime JSRuntime

<div class="password-recovery-container" style="background-color: #d4edda; min-height: 100vh;">
    <div class="container py-5">
        <div class="row justify-content-center">
            <div class="col-md-6 col-lg-5">
                <div class="card shadow-lg rounded-4">
                    <div class="card-body p-5 text-center">
                        <i class="bi bi-shield-lock-fill" style="font-size: 3rem; color: #198754;"></i>
                        <h2 class="mt-3 fw-bold" style="color: #198754;">Nova senha</h2>

                        <p class="mt-4 mb-4">
                            Digite a nova senha e confirme-a abaixo.
                        </p>

                        <EditForm Model="@senhaModel" OnValidSubmit="@HandleAlterarSenha">
                            <DataAnnotationsValidator />

                            <div class="mb-3">
                                <div class="position-relative">
                                    <InputText type="@(_showSenha ? "text" : "password")"
                                               @bind-Value="senhaModel.NovaSenha"
                                               class="form-control pe-5"
                                               placeholder="Nova senha" id="novaSenha" />
                                    <button type="button" class="btn position-absolute top-50 end-0 translate-middle-y bg-transparent border-0"
                                            @onclick="ToggleSenhaVisibility">
                                        <i class="@(_showSenha ? "fas fa-eye" : "fas fa-eye-slash") text-success"></i>
                                    </button>
                                </div>
                                <ValidationMessage For="@(() => senhaModel.NovaSenha)" class="text-danger" />
                            </div>

                            <div class="mb-4">
                                <div class="position-relative">
                                    <InputText type="@(_showSenha ? "text" : "password")"
                                               @bind-Value="senhaModel.ConfirmarSenha"
                                               class="form-control pe-5"
                                               placeholder="Confirmar senha" id="confirmarSenha" />
                                    <button type="button" class="btn position-absolute top-50 end-0 translate-middle-y bg-transparent border-0"
                                            @onclick="ToggleSenhaVisibility">
                                        <i class="@(_showSenha ? "fas fa-eye" : "fas fa-eye-slash") text-success"></i>
                                    </button>
                                </div>
                                <ValidationMessage For="@(() => senhaModel.ConfirmarSenha)" class="text-danger" />
                            </div>

                            <div class="d-grid">
                                <button type="submit" class="btn btn-success btn-lg" disabled="@carregando">
                                    <i class="bi bi-check-circle-fill me-2"></i> Alterar Senha
                                </button>
                            </div>
                        </EditForm>

                        @if (!string.IsNullOrWhiteSpace(mensagem))
                        {
                            <div class="alert @((sucesso ? "alert-success" : "alert-danger")) mt-4" role="alert">
                                @mensagem
                            </div>
                        }

                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private AlterarSenhaModel senhaModel = new AlterarSenhaModel();
    private string mensagem = null;
    private bool sucesso = false;
    private bool carregando = false;

    private bool _showSenha = false; // Essa variável agora controla a visibilidade de ambos os campos de senha.

    [Parameter]
    [SupplyParameterFromQuery(Name = "token")]
    public string Token { get; set; }

    private async Task HandleAlterarSenha()
    {
        mensagem = null;
        sucesso = false;
        carregando = true;

        try
        {
            var response = await Http.PostAsJsonAsync($"login/AlterarSenha?token={Token}", senhaModel);
            if (response.IsSuccessStatusCode)
            {
                sucesso = true;
                mensagem = "Senha alterada com sucesso. Você já pode fazer login.";
                await Task.Delay(3000);
                Navigation.NavigateTo("/login");
            }
            else
            {
                var erro = await response.Content.ReadAsStringAsync();
                mensagem = $"Erro: {erro}";
            }
        }
        catch (Exception ex)
        {
            mensagem = $"Erro inesperado: {ex.Message}";
        }

        carregando = false;
    }

    private void ToggleSenhaVisibility()
    {
        _showSenha = !_showSenha; // Toggle de visibilidade para ambas as senhas
    }

    public class AlterarSenhaModel
    {
        [Required(ErrorMessage = "A nova senha é obrigatória")]
        [StringLength(100, MinimumLength = 6, ErrorMessage = "A senha deve ter no mínimo 6 caracteres")]
        public string NovaSenha { get; set; }

        [Required(ErrorMessage = "A confirmação é obrigatória")]
        [Compare("NovaSenha", ErrorMessage = "As senhas não coincidem")]
        public string ConfirmarSenha { get; set; }
    }
}
