@page "/alterarsenha"
@using Blazored.Modal
@using Blazored.Modal.Services
@using System.ComponentModel.DataAnnotations
@using TCCDoacaoDeAlimentos.Shared.Models
@using TCCDoacaoDeAlimentos.Shared.Dto
@inject HttpClient Http
@inject NavigationManager Navigation
@inject Blazored.Toast.Services.IToastService ToastService
@inject IJSRuntime JSRuntime

<div class="password-recovery-container" style="background-color: #d4edda; min-height: 100vh;">
    <div class="container py-5">
        <div class="row justify-content-center">
            <div class="col-md-6 col-lg-5">
                <div class="card shadow-lg rounded-4">
                    <div class="card-body p-5 text-center">
                        <i class="bi bi-shield-lock-fill" style="font-size: 3rem; color: #198754;"></i>
                        <h2 class="fw-bold" style="margin-bottom: 0.5rem;">Nova senha</h2>
                        <p class="mb-4 text-muted" style="margin-top: 0.5rem;">Digite a nova senha e confirme-a abaixo</p>

                        <EditForm Model="@alterarSenha" OnValidSubmit="@HandleAlterarSenha">
                            <DataAnnotationsValidator />
                            <div class="mb-4">
                                <label for="novaSenha" class="form-label text-start w-100">Senha</label>
                                <div class="position-relative">
                                    <InputText type="@(_showSenha ? "text" : "password")"
                                               @bind-Value="alterarSenha.NovaSenha"
                                               class="form-control pe-5"
                                               placeholder="Nova senha" id="novaSenha" />
                                    <button type="button" class="btn position-absolute top-50 end-0 translate-middle-y bg-transparent border-0"
                                            @onclick="ToggleSenhaVisibility" tabindex="-1">
                                        <i class="@(_showSenha ? "fas fa-eye" : "fas fa-eye-slash") text-success"></i>
                                    </button>
                                </div>
                                <ValidationMessage For="@(() => alterarSenha.NovaSenha)" class="text-danger text-start d-block" />
                            </div>

                            <div class="mb-4">
                                <label for="confirmarSenha" class="form-label text-start w-100">Confirme a Senha</label>
                                <div class="position-relative">
                                    <InputText type="@(_showSenha ? "text" : "password")"
                                               @bind-Value="alterarSenha.ConfirmarSenha"
                                               class="form-control pe-5"
                                               placeholder="Confirmar senha" id="confirmarSenha" />
                                    <button type="button" class="btn position-absolute top-50 end-0 translate-middle-y bg-transparent border-0"
                                            @onclick="ToggleSenhaVisibility" tabindex="-1">
                                        <i class="@(_showSenha ? "fas fa-eye" : "fas fa-eye-slash") text-success"></i>
                                    </button>
                                </div>
                                <ValidationMessage For="@(() => alterarSenha.ConfirmarSenha)" class="text-danger text-start d-block" />
                            </div>

                            <div class="d-grid">
                                <button type="submit" class="btn btn-success btn-lg" disabled="@carregando">
                                    <i class="bi bi-check-circle-fill me-2"></i> Alterar Senha
                                </button>
                            </div>
                        </EditForm>


                        @if (!string.IsNullOrWhiteSpace(mensagem))
                        {
                            <div class="alert @((sucesso ? "alert-success" : "alert-danger")) mt-4" role="alert">
                                @mensagem
                            </div>
                        }

                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private AlterarSenhaDto alterarSenha = new AlterarSenhaDto();
    private string mensagem = "";
    private bool sucesso = false;
    private bool carregando = false;
    private bool _showSenha = false; 

    [Parameter]
    [SupplyParameterFromQuery(Name = "token")]
    public string Token { get; set; }

    protected override void OnParametersSet()
    {
        alterarSenha.Token = Token;
    }

    private async Task HandleAlterarSenha()
    {
        carregando = true;

        try
        {
            var response = await Http.PostAsJsonAsync("login/RedefinirSenha", alterarSenha);
            if (response.IsSuccessStatusCode)
            {
                sucesso = true;
                mensagem = "Senha alterada com sucesso. Você já pode fazer login.";
                await Task.Delay(3000);
                Navigation.NavigateTo("/login");
            }
            else
            {
                var erro = await response.Content.ReadAsStringAsync();
                mensagem = $"Erro: {erro}";
            }
        }
        catch (Exception ex)
        {
            mensagem = $"Erro inesperado: {ex.Message}";
        }

        carregando = false;
    }

    private void ToggleSenhaVisibility()
    {
        _showSenha = !_showSenha; 
    }
}
