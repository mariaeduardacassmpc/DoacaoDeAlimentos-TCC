@page "/Dashboard"
@using TCCDoacaoDeAlimentos.Shared.Models;
@using TCCDoacaoDeAlimentos.Shared.Dto;
@inject HttpClient Http
@inject AuthenticationStateProvider AuthStateProvider
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<div class="container-fluid py-4" style="background-color: #d4edda; min-height: 100vh;">
    <div class="container bg-white rounded-4 shadow-sm p-4 mb-4">
        <h2 class="text-success mb-4 pb-2 border-bottom border-success border-2">Dashboard</h2>

        <div class="row g-4">
            <div class="col-md-6">
                <div class="card text-white bg-success h-100 border-0 shadow">
                    <div class="card-body d-flex flex-column justify-content-between">
                        <div>
                            <h5 class="card-title opacity-75">
                                <i class="fas fa-hand-holding-heart me-2"></i>Doações recebidas este mês
                            </h5>
                            <p class="card-text display-4 fw-bold mb-0">@totalDoacoesMes</p>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-6">
                <div class="card text-white bg-success h-100 border-0 shadow">
                    <div class="card-body d-flex flex-column justify-content-between">
                        <div>
                            <h5 class="card-title opacity-75">
                                <i class="fas fa-users me-2"></i>Usuários cadastrados 
                            </h5>
                            <p class="card-text display-4 fw-bold mb-0">@usuariosLogados</p>
                        </div>                      
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="container bg-white rounded-4 shadow-sm p-4 mt-4">
        <div class="mb-4">
            <h2 class="text-success">
                <i class="fas fa-utensils me-2"></i> Relatório de Alimentos Recebidos
            </h2>
            <p class="text-muted">Análise detalhada dos alimentos recebidos</p>
        </div>
        <div class="row g-4">
            @foreach (var alimento in alimentosRecebidos)
            {
                <div class="col-md-6 col-lg-3">
                    <div class="card h-100 border-start border-success border-5">
                        <div class="card-body">
                            <div class="d-flex align-items-center">
                                <div>
                                    <h5 class="card-title mb-1">@alimento.Categoria</h5>
                                    <h4 class="mb-0">@alimento.TotalKg kg</h4>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
        <div class="d-flex justify-content-center align-items-center mt-7">
            <div>
                <h3 class="text-success mb-0 text-center mt-5">@($"Total: {totalKg} kg")</h3>

            </div>
        </div>
    </div>
    
    <div class="container bg-white rounded-4 shadow-sm p-4 mt-4">
        <div class="mb-4">
            <h2 class="card-title text-success">
                <i class="fas fa-file-export text-success me-2"></i> Gerar Relatório Completo
            </h2>
            <p class="text-muted mb-4 mt-1">Exporte um relatório detalhados sobre doações de alimentos</p>
            <div class="d-flex flex-wrap gap-2">
                <button class="btn btn-outline-success" @onclick="() => BaixarRelatorioMensal(idOng)">
                    <i class="fas fa-file-pdf me-2"></i> PDF - Relatório de Doações Mensal
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    private int totalDoacoesMes;
    private int usuariosLogados;
    private List<AlimentoPorCategoriaDto> alimentosRecebidos = new();
    private int totalKg;
    private double TotalGeral => alimentosRecebidos.Sum(a => a.TotalKg);
    private int idOng;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        var idClaim = user.FindFirst("sub") ?? user.FindFirst("userid") ?? user.FindFirst(ClaimTypes.NameIdentifier);

        if (idClaim != null && int.TryParse(idClaim.Value, out var id))
        {
            idOng = id;
        }
       

        await CarregarTotalDoacoesMes(idOng);
        await CarregarUsuariosCadastrados();
        await CarregarAlimentosRecebidos(idOng);
        await CarregarTotalKg(idOng);

    }

    private async Task CarregarTotalDoacoesMes(int idOng)
    {
        try
        {
            totalDoacoesMes = await Http.GetFromJsonAsync<int>($"api/relatorio/totalDoacoesNoMes?id={idOng}");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Erro ao carregar doações");
        }
    }

   private async Task CarregarTotalKg(int idOng)
   {
        try
        {
           totalKg = await Http.GetFromJsonAsync<int>($"api/relatorio/totalKgAlimentos?id={idOng}");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Erro ao carregar total de kg.");
        }
   }

    private async Task CarregarUsuariosCadastrados()
    {
        try
        {
            usuariosLogados = await Http.GetFromJsonAsync<int>("api/relatorio/totalUsuarios");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Erro ao obter usuários cadastrados.");
        }
    }

    private async Task CarregarAlimentosRecebidos(int idOng)
    {
        try
        {
            alimentosRecebidos = await Http.GetFromJsonAsync<List<AlimentoPorCategoriaDto>>($"api/relatorio/alimentosPorCategoria?id={idOng}")
               ?? new List<AlimentoPorCategoriaDto>();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Erro ao obter alimentos recebidos.");
        }
    }

    private async Task BaixarRelatorioMensal(int idOng)
    {
        try
        {
            var response = await Http.GetAsync($"api/relatorio/gerarPdfMensal?idOng={idOng}", HttpCompletionOption.ResponseHeadersRead);

            var fileBytes = await response.Content.ReadAsByteArrayAsync();
            var fileName = "Relatorio.pdf";
            await JSRuntime.InvokeVoidAsync("blazorDownloadFile", fileName, "application/pdf", fileBytes);


            if (response.IsSuccessStatusCode)
            {
                var bytes = await response.Content.ReadAsByteArrayAsync();
                var base64 = Convert.ToBase64String(bytes);

                await JSRuntime.InvokeVoidAsync("blazorDownloadFile", $"Relatorio_Mensal_Ong_{idOng}.pdf", "application/pdf", base64);
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Erro ao baixar relatório.");
        }
    }
}
