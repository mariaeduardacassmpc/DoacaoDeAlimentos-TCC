@page "/CadastroDeEntidade"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@using System.Text.RegularExpressions
@using TCCDoacaoDeAlimentos.Shared.Models
@using TCCDoacaoDeAlimentos.Shared.Dto

<div class="min-vh-100 d-flex align-items-center" style="background-color: #d4edda;">
    <div class="container py-5">
        <div class="row justify-content-center">
            <div class="col-lg-8 col-md-10">
                <div class="card shadow">
                    <div class="card-body p-5">
                        <h1 class="card-title text-center">Cadastro</h1>
                        <h6 class="text-center mb-4">Cadastre sua organização ou cadastre-se para doar</h6>

                        <EditForm Model="@entidade" OnValidSubmit="@CadastrarEntidade">
                            <DataAnnotationsValidator />
                            <hr />

                            <div class="mb-3">
                                <label class="form-label d-flex align-items-center gap-2 text-success">
                                    <i class="bi bi-check-circle"></i> Tipo de Entidade *
                                </label>
                                <InputRadioGroup @bind-Value="entidade.TpEntidade" class="form-check">
                                    <div class="form-check form-check-inline">
                                        <InputRadio Value="@( "I" )" class="form-check-input" id="instituicao" />
                                        <label class="form-check-label" for="instituicao">Instituição</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <InputRadio Value="@( "D" )" class="form-check-input" id="doador" />
                                        <label class="form-check-label" for="doador">Doador</label>
                                    </div>
                                </InputRadioGroup>
                                <ValidationMessage For="@(() => entidade.TpEntidade)" class="text-danger" />
                            </div>

                            <div class="mb-3">
                                <label class="form-label d-flex align-items-center gap-2 text-success">
                                    <i class="bi bi-person-fill"></i>
                                    @if (entidade.TpEntidade == "I")
                                    {
                                        <span>Nome Fantasia *</span>
                                    }
                                    else
                                    {
                                        <span>Nome Completo *</span>
                                    }
                                </label>
                                <InputText @bind-Value="entidade.NomeFantasia" class="form-control" id="nomeFantasia" placeholder="Nome Fantasia" />
                                <ValidationMessage For="@(() => entidade.NomeFantasia)" class="text-danger" />
                            </div>

                            @if (entidade.TpEntidade == "I")
                            {
                                <div class="mb-3">
                                    <label for="responsavel" class="form-label d-flex align-items-center gap-2 text-success">
                                        <i class="bi bi-person-circle"></i> Responsável *
                                    </label>
                                    <InputText @bind-Value="entidade.Responsavel" class="form-control" id="responsavel" placeholder="Nome do responsável" />
                                    <ValidationMessage For="@(() => entidade.Responsavel)" class="text-danger" />
                                </div>
                            }

                            @if (entidade.TpEntidade == "D" && entidade.TpPessoa == Entidade.TipoPessoa.F)
                            {
                                <div class="mb-3">
                                    <label for="sexo" class="form-label d-flex align-items-center gap-2 text-success">
                                        <i class="bi bi-check-circle"></i> Sexo *
                                    </label>
                                    <InputSelect @bind-Value="entidade.Sexo" class="form-control" id="sexo">
                                        <option value="" selected disabled>Selecione...</option>
                                        <option value="F">Feminino</option>
                                        <option value="M">Masculino</option>
                                    </InputSelect>
                                    <ValidationMessage For="@(() => entidade.Sexo)" class="text-danger" />
                                </div>
                            }

                            @if (entidade.TpEntidade == "D")
                            {
                                <label class="form-label d-flex align-items-center gap-2 text-success">
                                    <i class="bi bi-person-check-fill"></i> Tipo de Pessoa *
                                </label>
                                <InputRadioGroup @bind-Value="entidade.TpPessoa" class="form-check">
                                    <div class="form-check form-check-inline">
                                        <InputRadio Value="Entidade.TipoPessoa.F" class="form-check-input" id="pessoaFisica" />
                                        <label class="form-check-label" for="pessoaFisica">Física</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <InputRadio Value="Entidade.TipoPessoa.J" class="form-check-input" id="pessoaJuridica" />
                                        <label class="form-check-label" for="pessoaJuridica">Jurídica</label>
                                    </div>
                                </InputRadioGroup>
                                <ValidationMessage For="@(() => entidade.TpPessoa)" class="text-danger" />
                            }

                            @if (entidade.TpEntidade == "I" || entidade.TpPessoa == Entidade.TipoPessoa.J)
                            {
                                <div class="mb-3">
                                    <label for="cnpj" class="form-label d-flex align-items-center gap-2 text-success">
                                        <i class="bi bi-file-earmark-text-fill"></i> CNPJ *
                                    </label>
                                    <MaskedInput @bind-Value="entidade.CNPJ_CPF" Mask="00.000.000/0000-00" Placeholder="00.000.000/0000-00" />
                                    <ValidationMessage For="@(() => entidade.CNPJ_CPF)" class="text-danger" />
                                </div>
                            }
                            else if (entidade.TpEntidade == "D" && entidade.TpPessoa == Entidade.TipoPessoa.F)
                            {
                                <div class="mb-3">
                                    <label for="cpf" class="form-label d-flex align-items-center gap-2 text-success">
                                        <i class="bi bi-file-earmark-text-fill"></i> CPF *
                                    </label>
                                    <MaskedInput @bind-Value="entidade.CNPJ_CPF" Mask="000.000.000-00" Placeholder="000.000.000-00" />
                                    <ValidationMessage For="@(() => entidade.CNPJ_CPF)" class="text-danger" />
                                </div>
                            }

                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <label class="form-label d-flex align-items-center gap-2 text-success">
                                        <i class="bi bi-telephone-fill"></i> Telefone *
                                    </label>
                                    <MaskedInput @bind-Value="entidade.Telefone" Mask="(00) 00000-0000" Placeholder="(00) 00000-0000" />
                                    <ValidationMessage For="@(() => entidade.Telefone)" class="text-danger" />
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label d-flex align-items-center gap-2 text-success">
                                        <i class="bi bi-envelope-fill"></i> E-mail *
                                    </label>
                                    <InputText @bind-Value="entidade.Email" class="form-control" id="email"
                                               placeholder="contato@entidade.org" />
                                    <ValidationMessage For="@(() => entidade.Email)" class="text-danger" />
                                </div>
                            </div>

                            <div class="mb-3">
                                <label class="form-label d-flex align-items-center gap-2 text-success">
                                    <i class="bi bi-geo-alt-fill"></i> CEP *
                                </label>
                                <InputText @bind-Value="entidade.CEP" class="form-control" id="cep" placeholder="00000-000" @oninput="BuscarEnderecoPorCep" />
                                <ValidationMessage For="@(() => entidade.CEP)" class="text-danger" />
                            </div>

                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <label class="form-label d-flex align-items-center gap-2 text-success">
                                        <i class="bi bi-geo-alt-fill"></i> Cidade *
                                    </label>
                                    <InputText @bind-Value="entidade.Cidade" class="form-control" id="cidade" placeholder="Sua cidade" />
                                    <ValidationMessage For="@(() => entidade.Cidade)" class="text-danger" />
                                </div>

                                <div class="col-md-6">
                                    <label class="form-label d-flex align-items-center gap-2 text-success">
                                        <i class="bi bi-geo-alt-fill"></i> Bairro *
                                    </label>
                                    <InputText @bind-Value="entidade.Bairro" class="form-control" id="bairro" placeholder="Bairro" />
                                    <ValidationMessage For="@(() => entidade.Bairro)" class="text-danger" />
                                </div>
                            </div>

                            <div class="row mb-3">
                                <div class="col-md-10">
                                    <label class="form-label d-flex align-items-center gap-2 text-success">
                                        <i class="bi bi-house-door-fill"></i> Endereço *
                                    </label>
                                    <InputText @bind-Value="entidade.Endereco" class="form-control" id="endereco" placeholder="Endereço completo" />
                                    <ValidationMessage For="@(() => entidade.Endereco)" class="text-danger" />
                                </div>
                                <div class="col-md-2">
                                    <label class="form-label"><i class="fas fa-check-circle text-success me-1"></i>Número *</label>
                                    <InputText @bind-Value="entidade.Numero" class="form-control" id="numero" placeholder="Nº" />
                                    <ValidationMessage For="@(() => entidade.Numero)" class="text-danger" />
                                </div>
                            </div>
                        

                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <label class="form-label d-flex align-items-center gap-2 text-success">
                                        <i class="bi bi-lock-fill"></i> Senha *
                                    </label>
                                    <div class="position-relative">
                                        <InputText type="@(_showPassword ? "text" : "password")"
                                                   @bind-Value="entidade.Senha"
                                                   class="form-control pe-5"
                                                   placeholder="Digite sua senha"
                                                   id="senha" />
                                        <button type="button" class="btn position-absolute top-50 end-0 translate-middle-y bg-transparent border-0"
                                                @onclick="ToggleAllPasswords">
                                            <i class="@(_showPassword ? "fas fa-eye" : "fas fa-eye-slash") text-success"></i>
                                        </button>
                                    </div>
                                    <ValidationMessage For="@(() => entidade.Senha)" class="text-danger" />
                                </div>

                                <div class="col-md-6">
                                    <label class="form-label d-flex align-items-center gap-2 text-success">
                                        <i class="bi bi-lock-fill"></i> Confirmar Senha *
                                    </label>
                                    <div class="position-relative">
                                        <InputText type="@(_showPassword ? "text" : "password")"
                                                   @bind-Value="entidade.ConfirmarSenha"
                                                   class="form-control pe-5"
                                                   placeholder="Digite novamente sua senha"
                                                   id="confirmarSenha" />
                                        <button type="button" class="btn position-absolute top-50 end-0 translate-middle-y bg-transparent border-0"
                                                @onclick="ToggleAllPasswords">
                                            <i class="@(_showPassword ? "fas fa-eye" : "fas fa-eye-slash") text-success"></i>
                                        </button>
                                    </div>
                                    <ValidationMessage For="@(() => entidade.ConfirmarSenha)" class="text-danger" />
                                </div>
                            </div>

                            <div class="d-grid">
                                <button type="submit" class="btn btn-success btn-lg mt-3">Enviar Cadastro</button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>



@code {
    private Entidade entidade = new Entidade
        {
            TpEntidade = "",
            TpPessoa = null
        };
    private bool _showPassword = false;
    private bool tentouEnviar = false;
    private double? latitude;
    private double? longitude;

    private async Task CadastrarEntidade()
    {
        try
        {
            await ObterLocalizacaoUsuario();

            var dadosParaEnvio = new Entidade
                {
                    Responsavel = entidade.Responsavel,
                    Senha = entidade.Senha,
                    ConfirmarSenha = entidade.ConfirmarSenha,
                    Email = entidade.Email,
                    Telefone = (entidade.Telefone),
                    CNPJ_CPF = (entidade.CNPJ_CPF),
                    Endereco = $"{entidade.Endereco}, {entidade.Numero}",
                    Numero = entidade.Numero,
                    Bairro = entidade.Bairro,
                    Cidade = entidade.Cidade,
                    CEP = (entidade.CEP),
                    Latitude = entidade.Latitude,
                    Longitude = entidade.Longitude,
                    TpEntidade = entidade.TpEntidade,
                    Sexo = entidade.Sexo,
                    NomeFantasia = entidade.NomeFantasia,
                    TpPessoa = entidade.TpPessoa
                };

            var response = await Http.PostAsJsonAsync("api/entidade/adicionar", dadosParaEnvio);

            if (response.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Cadastro realizado com sucesso!");
                Navigation.NavigateTo("/");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                await JSRuntime.InvokeVoidAsync("alert", $"Erro no cadastro: {error}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Erro crítico: {ex.Message}");
        }
    }

    private void ToggleAllPasswords() =>
        _showPassword = !_showPassword;

    private async Task BuscarEnderecoPorCep(ChangeEventArgs e)
    {
        var cep = (e.Value?.ToString() ?? "");
        if (string.IsNullOrWhiteSpace(cep) || cep.Length != 8)
        {
            return;
        }

        try
        {
            // Aqui estamos fazendo uma requisição para a API ViaCep
            var response = await Http.GetFromJsonAsync<ViaCep>($"api/viacep/BuscarCep/{cep}");

            if (response != null)
            {
                entidade.Bairro = response.Bairro;
                entidade.Cidade = response.Localidade; // Certifique-se de que a cidade está sendo preenchida corretamente
                entidade.Endereco = response.Logradouro;
                StateHasChanged();  // Isso força o Blazor a re-renderizar a página com os novos dados
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Erro crítico.");

            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Erro crítico: {ex.Message}");

        }
    }


    private async Task ObterLocalizacaoUsuario()
    {
        try
        {
            var location = await JSRuntime.InvokeAsync<Geolocalizacao>("getUserLocation");
            latitude = location.lat;
            longitude = location.lng;
            entidade.Latitude = latitude;
            entidade.Longitude = longitude;
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Erro crítico: {ex.Message}");

        }
    }

    public class Geolocalizacao
    {
        public double lat { get; set; }
        public double lng { get; set; }
    }

    public enum TipoPessoa
    {
        F,
        J
    }
}