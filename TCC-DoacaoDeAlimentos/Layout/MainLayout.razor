@using FrontDoacaoDeAlimentos.Pages
@using Microsoft.AspNetCore.Components.Authorization
@inherits LayoutComponentBase
@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject Blazored.Modal.Services.IModalService Modal
@inject AuthenticationStateProvider AuthStateProvider
@inject HttpClient Http
@inject Blazored.Modal.Services.IModalService Modal

<div class="page">
    <main>
        <nav class="navbar navbar-expand-lg navbar-light px-4 py-3 shadow-sm" style="background-color: white;">
            <div class="container-fluid">
                <NavLink class="navbar-brand fw-bold d-flex align-items-center" href="/" Match="NavLinkMatch.All">
                    <i class="bi bi-heart-fill me-2" style="color: var(--primary-color); font-size: 1.5rem;"></i>
                    <span style="color: var(--primary-color);">AlimentAção</span>
                </NavLink>


                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent"
                aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>

                <div class="collapse navbar-collapse" id="navbarSupportedContent">
                    <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                        <li class="nav-item mx-2">
                            <NavLink class="nav-link" active-class="active" href="/" @onclick="FecharMenu">Início</NavLink>
                        </li>

                        <li class="nav-item mx-2">
                            <NavLink class="nav-link" href="/MinhasDoacoes" @onclick="FecharMenu">
                                @(TpEntidade == "I" ? "Doações Recebidas" : "Minhas Doações")
                            </NavLink>
                        </li>

                        @if (TpEntidade == "I")
                        {
                            <li class="nav-item mx-2">
                                <NavLink class="nav-link" href="/CadastroDeAlimentos" @onclick="FecharMenu">Cadastro de Alimentos</NavLink>
                            </li>
                        }

                        @if (TpEntidade != "I")
                        {
                            <li class="nav-item mx-2">
                                <NavLink class="nav-link" href="/Geolocalizacao" @onclick="FecharMenu">Geolocalização</NavLink>
                            </li>
                        }

                        @if (TpEntidade == "I")
                        {
                            <NavLink class="nav-link" href="/Dashboard" @onclick="FecharMenu">Dashboard</NavLink>
                        }

                        @if (!UsuarioEstaLogado)
                        {
                            <li class="nav-item mx-2">
                                <NavLink class="nav-link" href="/CadastroDeEntidade" @onclick="FecharMenu">Cadastrar</NavLink>
                            </li>
                        }

                        @if (UsuarioEhAdmin)
                        {
                            <li class="nav-item mx-2">
                                <NavLink class="nav-link" href="/Usuarios" @onclick="FecharMenu">Listar Úsuarios</NavLink>
                            </li>
                        }
                    </ul>

                    <div class="d-flex align-items-center gap-2">
                        @if (!UsuarioEstaLogado)
                        {
                            <a class="btn btn-outline-success" href="/Login" @onclick="FecharMenu">Entrar</a>
                        }

                        @if (TpEntidade != "I")
                        {
                            <a class="btn btn-success me-2" href="/CadastroDeDoacao" @onclick="FecharMenu">
                                <i class="bi bi-gift-fill me-1"></i> Doar
                            </a>
                        }

                    </div>
                    <div class="d-flex align-items-center me-3">
                        @if (UsuarioEstaLogado)
                        {
                            <div class="dropdown">
                                <button class="btn border-0 p-0 bg-transparent" type="button" id="perfilMenu" data-bs-toggle="dropdown" aria-expanded="false"
                                style="box-shadow:none; outline:none;">
                                    <i class="bi bi-person-circle fs-2 text-success"></i>
                                </button>
                                <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="perfilMenu">
                                    <li>
                                        <a class="dropdown-item" @onclick="IrParaPerfil">
                                           <i class="bi bi-file-person-fill text-success"></i> Meu Perfil
                                        </a>
                                    </li>
                                    <li>
                                        <a class="dropdown-item" @onclick="InativarConta">
                                            <i class="bi bi-trash-fill me-2 text-success"></i> Excluir Conta
                                        </a>
                                    </li>
                                    <li>
                                        <a class="dropdown-item" @onclick="Logout">
                                            <i class="bi bi-box-arrow-right me-2 text-success"></i> Sair
                                        </a>
                                    </li>

                                </ul>
                            </div>
                        }
                    </div>

                </div>
            </div>
        </nav>
    </main>
    <div class="main-content">
        @Body
    </div>
</div>

@code {
    private string EmailUsuarioLogado;
    private bool UsuarioEhAdmin => EmailUsuarioLogado == "mariaedurdamma@gmail.com";
    private string? EmailUsuario;
    private string TpEntidade;
    private bool EhAdmin = false;
    private bool modalAberto = false;
    private bool UsuarioEstaLogado;

    private async void IrParaPerfil()
    {
        try
        {
            Navigation.NavigateTo("/EditarUsuario");
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Erro ao tentar navegar para o perfil.");
        }
    }

    private async Task Logout()
    {
        try
        {
            await JS.InvokeVoidAsync("sessionStorage.removeItem", "token");
            UsuarioEstaLogado = false;
            TpEntidade = "";
            EmailUsuarioLogado = "";
            StateHasChanged();
            Navigation.NavigateTo("/login", true);
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Erro ao realizar logout.");
        }
    }

    private async Task FecharMenu()
    {
        try
        {
            await JS.InvokeVoidAsync("fecharMenuNavbar");
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Erro ao fechar o menu.");
        }
    }

    private async Task AtualizarUsuario()
    {
        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            var token = await JS.InvokeAsync<string>("sessionStorage.getItem", "token");

            UsuarioEstaLogado = (user.Identity?.IsAuthenticated == true) && !string.IsNullOrEmpty(token);

            TpEntidade = user.FindFirst("TpEntidade")?.Value ?? "";
            EmailUsuarioLogado = user.Identity?.Name ?? "";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Erro ao atualizar usuário.");
        }
    }


    protected override async Task OnInitializedAsync()
    {
        try
        {
            AuthStateProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;
            await AtualizarUsuario();
            var token = await JS.InvokeAsync<string>("sessionStorage.getItem", new object[] { "token" });
            UsuarioEstaLogado = !string.IsNullOrEmpty(token);
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Erro ao inicializar o componente: {ex.Message}");
        }
    }

    private async void OnAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        try
        {
            await AtualizarUsuario();
            var token = await JS.InvokeAsync<string>("sessionStorage.getItem", new object[] { "token" });
            UsuarioEstaLogado = !string.IsNullOrEmpty(token);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Erro ao mudar o estado de autenticação: {ex.Message}");
        }
    }

    public void Dispose()
    {
        AuthStateProvider.AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }

    public async void InativarConta()
    {
        try
        {
            // var response = await Http.PutAsync($"api/entidade/inativar/{entidadeId}", null);

            // if (response.IsSuccessStatusCode)
            // {
            //     Console.WriteLine("Conta inativada com sucesso.");
            // }
            // else
            // {
            //     Console.WriteLine("Erro ao inativar conta.");
            // }

        }
        catch (Exception ex)
        {
            
        }
    }

}
